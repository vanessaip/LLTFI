defaultTimeOut: 500 #customize the default timeout threshold

## Both 'layerNo' and 'layerName' options have to be specified and do not have any default values set.
## The number of arguments specified for 'layerNo' and 'layerName' must be equal.
   ## Example: 
   ## (layerNo= 0; 1; layerName= conv) is invalid and will produce error in the instrumentation stage.
## Valid layername arguments are: conv, relu, maxpool, matmul, add, avgpool, loop, nonmaxs, unsqueeze, softmax and all.

## To inject faults into all layers of a specific type in the model:
## LayerNo: The value '0' represents all layers of the type mentioned in LayerName;
## layerName: The specific layers (convolution, relu etc) for fault injection must be mentioned in layerName.
## For the below example, fault injection is done for all the convolution and relu layers in the model.
compileOption:
    instSelMethod:
      - customInstselector:
          include:
            - CustomTensorOperator
          options:
            - layerNo=0;0 
            - layerName=conv;relu

## To inject faults into a specific layer number in the model:
## LayerNo: The value '1' represents first layer of the 'layerName' type;
## layerName: The type of layer must be mentioned in layerName.
## In the below example, fault injection is done for the first convolution layer in the model
compileOption:
    instSelMethod:
      - customInstselector:
          include:
            - CustomTensorOperator
          options:
            -layerNo=1 
            -layerName=conv

## To inject faults into all the layers of the model:
## layerNo: The value '0' represents all layers of the 'layerName' type;
## layerName: Specify 'all' to inject fault in all the layers
compileOption:
    instSelMethod:
      - customInstselector:
          include:
            - CustomTensorOperator
          options:
            - layerNo=0 
            - layerName=all    

## To inject faults into the weights and biases of the model:
## weights: set to True to inject into weights, False otherwise (default is True)
## bias: set to True to inject into biases, False otherwise (default is False)
## layerNo_WandB: The value '0' represents all layers of the 'layerName_WandB' type;
## layerName_WandB: The type of layer must be mentioned in layerName. 
##                  NOTE: must specify 'add' operator to inject into weights (for now)
compileOption:
    instSelMethod:
      - customInstselector:
          include:
            - WeightsAndBiases
          options:
            - weights=True
            - bias=True
            - layerNo_WandB=0;0
            - layerName_WandB=matmul;add

    ## To use a location-based register selector to select targeting register:
    regSelMethod: regloc
    ## To select the destination register
    regloc: dstreg
    ## To select the 1st source register
    regloc: srcreg1
    ## To select the 2nd source register
    regloc: srcreg2
    ## To select the 3rd source register
    regloc: srcreg3

    ## To incorporate the forward slice/backward slice of the selected instructions as injection targets: 
    includeInjectionTrace: 
        - forward # include forward trace of the selected instructions into fault injection targets
        - backward # include forward trace of the selected instructions into fault injection targets

    ## To turn on the tracing (or turn off)
    tracingPropagation: False/True # trace dynamic instruction values.
    tracingPropagationOption:
        maxTrace: 250 # max number of instructions to trace during fault injection run
        debugTrace: False/True # print debug info or not
        generateCDFG: False/True # generates the graph for trace

runOption:
    ## To inject a common hardware fault in all injection targets by random:
    - run:
        numOfRuns: 5 # run injection for 5 times
        fi_type: bitflip/stuck_at_0/stuck_at_1 # specify the fault type
        timeOut: 1000 # specify a custom timeout threashold for only this experiment

    ## To inject a bitflip fault at a specified cycle, on a specified register and
    ## a specified bit position. This can be used for reproducing an pervious injection
    ## result.
    - run:
        numOfRuns: 3
        fi_type: bitflip
        fi_cycle: 10
        fi_reg_index: 3
        fi_bit: 32
        fi_reg: 2
        verbose: True/False # prints return code summary at end of injection
        timeOut: 1000

    ## To inject multiple bitflip fault on one register:
    ## (for example, 4 bits in one register)
    - run:
        numOfRuns: 5
        fi_type: bitflip
        fi_num_bits: 4

    ## To inject TWO faults into two registers, specifying a maximum cycles between 
    ## the two faults:
    ## (for example, 4 cycles)
    - run:
        numOfRuns: 50
        fi_type: bitflip
        window_len: 10

    ## To use a custom fault injector (fault type) for this experiment:
    ## ('BufferOverflow(API)' is an fault injector for software failures 
    ##  shipped with LLFI)
    - run:
        numOfRuns: 5
        fi_type: BufferOverflow(API)
    
    ## To inject a maximum of 4 bit-flip errors into multiple registers.
    ## The distance between each consecutive injection is controlled by a random number representing the number of dynamic instructions that needs
    ## to be executed between the consecutive injections. The lower bound and upper bound of the random number are especified as two of the run time options.
    - run:
        numOfRuns: 5
        fi_type: bitflip
        fi_max_multiple: 4
        window_len_multiple_startindex: 10
        window_len_multiple_endindex: 100

    ## To inject a maximum of 4 bit-flip errors into multiple registers starting from a specific bit of a specific register in a specific cycle.
    ## This configuration is used to compare single bit-flip results with multiple bit-flip results.
    ## The distance between each consecutive injection is controlled by a random number representing the number of dynamic instructions that needs
    ## to be executed between the consecutive injections. The lower bound and upper bound of the random number are especified as two of the run time options.
    - run:
        numOfRuns: 5
        fi_type: bitflip
        fi_cycle: 684347
        fi_index: 417
        fi_reg_index: 0
        fi_reg_pos: 1
        fi_bit: 15
        fi_max_multiple: 4
        window_len_multiple_startindex: 10
        window_len_multiple_endindex: 100
  
  
kernelOption:
    - forceRun

# To use Fake Quantization within LLTFI, you need to specify the target layer that would be Quantized 
# There is a parameter minPercentileOutlierThreshold and maxPercentileOutlierThreshold which eliminates outliers within the tensor input 
# However, this parameter needs to be mentioned by the user and is not automatically set
# When set, the values permitted within the input tensor must satisfy this condition 
# (floating number at minPercentileOutlierThreshold) <= input tensor <= (floating number at maxPercentileOutlierThreshold)
# Values that dont satisfy this condition are shifted to the (floating number at minPercentileOutlierThreshold) or (floating number at maxPercentileOutlierThreshold),
# whichever is the nearest
# One sample code is - 

compileOption:
    fakeQuant: 
      targetLayer: conv
      minPercentileOutlierThreshold : 10
      maxPercentileOutlierThreshold : 90
      bitWidth: 8
      

# Fake Quantization parameters comes within compileOption. In here, you need to mention the targer layer - conv or matmul (currently only supporting these)
# minPercentileOutlierThreshold and maxPercentileOutlierThreshold are optional parameters. On not mentioning these parameters, they are autoamtically set to 
# minPercentileOutlierThreshold = 0 and maxPercentileOutlierThreshold = 100
# bitWidth needs to be mentioned and is the bit width of the Quantized Int numbers which needs to be a exponent of power 2
